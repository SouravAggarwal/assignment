>> Problem statement:
Write the most efficient algorithm that helps determine a list of matches with match percentages for each match between huge set of properties (sale and rental) and buyer/renter search criteria as and when a new property or a new search criteria is added.
 Problem details:
We have a lot of properties from property sellers and searches requirements from property buyers which get added to a SQL database every day. Every day these multiple properties and search criteria get added through our application by agents. Write an algorithm to match these properties and search criteria as they come in based on 4 parameters such that each match has a match percentage.

The 4 parameters are:  Distance - radius (high weightage)  Budget (high weightage)  Number of bedrooms (low weightage)  Number of bathrooms (Low weightage) 
 Each match should have a percentage that indicates the quality of the match. Ex: if a property exactly matches a buyers search requirement for all 4 constraints mentioned above, it’s a 100% match. 
 Each property has these the attributes - Id, Latitude, Longitude, Price, Number of bedrooms, Number of bathrooms 
 Each requirement has these 9 attributes - Id, Latitude, Longitude, Min Budget, Max budget, Min Bedrooms required, Max bedroom reqd, Min bathroom reqd, Max bathroom reqd. 
 Functional requirements  All matches above 40% can only be considered useful.  The code should scale up to a million properties and requirements in the system.  All corner cases should be considered and assumptions should be mentioned 
 Requirements can be without a min or a max for the budget, bedroom and a bathroom but either min or max would be surely present. 
 For a property and requirement to be considered a valid match, distance should be within 10 miles, the budget is +/- 25%, bedroom and bathroom should be +/- 2.  If thedistance is within 2 miles, distance contribution for the match percentage is fully 30%  If budget is within min and max budget, budget contribution for the match percentage is full 30%. If min or max is not given, +/- 10% budget is a full 30% match.  If bedroom and bathroom fall between min and max, each will contribute full 20%. If min or max is not given, match percentage varies according to the value.  The algorithm should be reasonably fast and should be quick in responding with matches for the users once they upload their property or requirement.  Note: Be as detailed as possible. Use your own way of presenting your algorithm.


>> Assumptions/Considerations:
1) here, distance is considered as great-circle or orthodromic distance b/w the property and the requirement.
2) Considering all given number points as inclusive.
3) properties (seller/renter side): A json list with all given attributes.
4) requirements (buyer/tenant side): A json list with all given attributes.
5) It will check all properties with all requirements, as the data points are collected from a small area (ie. Andheri (Mumbai)).
6) for Distance 
    valid cases: considering 10 miles as inclusive.
7) for Bedrooms/Bathrooms
    7.1) When only a minimum number of bedrooms/bathrooms is given:
        valid cases will include [min-2, min-1, min, min+1, min+2]
        where match% will be [6.668%, 13.334%, 20%, 13.334%, 6.668%] respectively. 
    7.2) same when only maximum number of bedrooms/bathrooms is given.
8) for Budget
    if neither min nor max of Requirement is given, means the buyer is acceptable with any budget.
    then, match% will be complete +=30%
9) In given dataset (dummydata.json), values which not present in db or null values are taken as zero.
10) first It will calculate subtotal which is match % for each one of the bedroom, bathroom, budget, distance independently,
    then we sum up all according to their weightage.

>>Cases:
X (dict type): is considered as a given property(seller/renter side), having all relevant attributes.
For Valid matches:
    distance must be within 10 miles (inclusive)
    the budget can be +/-25 
    bedrooms and bathrooms can be +/-2

1) Distance
    1.1) Ideal case: If distance is 2 or less than 2 miles then, 
          subtotal_distance =100% or total match% contribution +=30%
    1.2) For Valid cases, distance must be 10 or less than 10 miles:
          Ex- consider if distance is [2, 3, ...  9, 10] miles
          subtoal_distance percentage will be [100%, 87.5, ... 25, 12.5] accordingly
          or total match % contibution will be [30%, 26.25, ... 7.5, 3.75]
          ~= 30% of total match percentage is proportional to 100 % of subtotal_distance.
2) Budget
    2.1) if both min and max are provided,
          Ideal case: if X["budget"] is in inclusive range of min and max
          then subtotal_budget =100% or total match% +=30%
    2.2) if either min or max is given:
          then, req_budget = min or max
        2.2.1) if req_budget is in +/-10% of X["budget"]
                then, subtotal_budget =100% or total match% +=30%
        2.2.2) else:
                for valid cases req_budget must be in +/-25% of X["budget"]
                then, total match % varies accordingly.
    2.3) if neither min nor max is given:
          the, subtotal_budget = 100% or total match contribution% +=30%
    2.4) if both min and max are given, but not an ideal case:
          It consider the outliers +(25-10)% of max budget and -(25-10)% of min budget
          and total match % varies accordingly.


3) Bedroom/Bathroom:
    3.1) if both min and max are provided:
          Ideal case: if X["bedroom"] must be in inclusive range of  min and max, 
          then subtotal_bedroom = 100% or total match contribution% is += 20% 
    3.2) if both max and min are given, but not an Ideal case:
          then, it check for the outliers [min-2, min-1, min, max, max+1, max+2]
          and match % varies accordingly.  
    3.3) if only min is given:
          for valid case X["bedroom"] must be in [min-2, min-1, min, min+1, min+2]
          then, subtotal_min_bedroom match% will be [33.34%, 66.67%, 100%, 66.67%, 33.34%]    
          or total match% will be [6.668%, 13.334%, 20%, 13.334%, 6.668%]  respectively.
    3.4) if only  max is given:
          for valid case X["bedroom"] must be in [max-2, max-1, max, max+1, max+2]
          then, subtotal_max_bedroom match% will be [33.34%, 66.67%, 100%, 66.67%, 33.34%]    
          or total match% will be [6.668%, 13.334%, 20%, 13.334%, 6.668%]  respectively.
                    
Ideal total match%: 100%


Key Points followed:
1) Flat is Better than Nested.
2) Simple
3) Flexible
4) all defined thresholds/limits like (weightage, +/- 25% budget, +/- 2 bedrooms, +/- 10% budget is a full 30% match) can be customized as their respective function arguments.
5) Execution Time (for checking 1million properties with 1million requirements):
    a) On single thread:
        70 seconds: with current code senario
        48 seconds: with some minor changes (bit more optimized) in cal_total() and fetch_valid_properties() functions.
                    but it was less explanatory so I reverted back.
    b) with multithreading (3 threads)
        31 seconds: with current code 
        24 seconds: with the optimized one.

Quite Interesting Problem :)


        